*rcom.txt*          Evaluate R (www.r-project.org) code via rcom (windows only)
                    Author: Tom Link, micathom at gmail com

This plugin is still experimental. During development it made vim hang 
from time to time. Please report any problem to the author. Thanks.

The rcom ftplugin uses the RCom interface (http://rcom.univie.ac.at)
to R for sending code to a running instance of R. This way any R
snippet can be easily evaluated in that instance of R.

After installation, interaction with R via rcom is enabled for all
buffers with filetype r. For other filetypes, you can use the
functions |rcom#EvaluateInBuffer()|.


Features:

    - Evaluate R code
    - Omnicompletion for R
    - Maps for normal, visual, and insert mode
    - Keyword map (|K|)
    - Operator


Caveats:

It is recommended to set |g:rcom#server| and |g:rcom#reuse|.

Setting |g:rcom#reuse| = 1 is more stable. Depending on your version of 
ruby & R & rcom, g:rcom#reuse = 0 could make your gvim crash.


Maps~

The ftplugin provides several maps (see also |g:rcom_map|, 
|g:rcom_mapp|) to evaluate R code and optionally print the result in 
normal, insert, and visual mode. There is also an operator (see 
|g:rcom_mapop|).


Normal usage~

    1. Start an instance of R GUI and load the image you want.
    2. Open an R source file in VIM.
    3. Type <c-cr> to evaluate the current line/visual area in R.
    4. Type [count]+ or +{motion} to evaluate some text in R. (You can 
       type ++ to invoke |+|.)

By default, the results get printed in the R GUI window. You might want 
to arrange the windows in a way, so that you can see VIM, R console and 
R graphic device at the same time.


Two modes~

#1 Run as headless StatConnectorSrv:
    This is only useful when used from another library as you won't see 
    any output. Any output from a print command is inserted in the 
    result. If there is a .Rdata image in the same directory as the 
    current buffer, it is loaded.

#2 Re-use a running instance of R:
    If there is a .Rhistory file in the same directory as the current
    buffer, it is loaded. This is the default mode when enabling an R 
    buffer via |rcom#EvaluateInBuffer()|.

You can only connect to one instance of R at a time. If there are
several instances of R running ... well, good luck then. :-)


-----------------------------------------------------------------------
Install~

Requirements:

    - Windows only (because of rcom)
    - A ruby-enabled version of vim -- :echo has('ruby') must print 1
    - R
    - A suitable version of rcom (http://rcom.univie.ac.at). The rcom 
      library has to be loaded in vim, which should be the default 
      behaviour after installing rcom. The following code snippet must 
      not throw an error: >

      :ruby require 'win32ole'; r = WIN32OLE.new("StatConnectorSrv.StatConnector"); r.Init("R"); r.Close

Edit the vba file and type: >

    :so %

See :help vimball for details. If you have difficulties or use vim 7.0,
please make sure, you have the current version of vimball
(vimscript #1502) installed or update your runtime.

After installation, you might want to check the value of
|g:rcom#server| and maybe set it in your |vimrc| file. When this 
variable is set, an instance of gvim will be started that acts as a 
proxy so that the instance used for editing the R file won't be 
blocked.

Also available via git: http://github.com/tomtom/vimtlib/


========================================================================
Contents~

        g:rcom#help ............. |g:rcom#help|
        g:rcom#reuse ............ |g:rcom#reuse|
        g:rcom#transcript_cmd ... |g:rcom#transcript_cmd|
        g:rcom#log_cmd .......... |g:rcom#log_cmd|
        g:rcom#server ........... |g:rcom#server|
        g:rcom#server_wait ...... |g:rcom#server_wait|
        rcom#Initialize ......... |rcom#Initialize()|
        rcom#EvaluateInBuffer ... |rcom#EvaluateInBuffer()|
        rcom#Evaluate ........... |rcom#Evaluate()|
        rcom#Quit ............... |rcom#Quit()|
        rcom#Complete ........... |rcom#Complete()|
        rcom#Keyword ............ |rcom#Keyword()|
        rcom#Info ............... |rcom#Info()|
        rcom#GetSelection ....... |rcom#GetSelection()|
        rcom#Operator ........... |rcom#Operator()|
        rcom#LogBuffer .......... |rcom#LogBuffer()|
        :RComlog ................ |:RComlog|
        :RComlogreset ........... |:RComlogreset|
        rcom#TranscriptBuffer ... |rcom#TranscriptBuffer()|
        :RComtranscript ......... |:RComtranscript|
        rcom#Transcribe ......... |rcom#Transcribe()|
        g:rcom_map .............. |g:rcom_map|
        g:rcom_mapp ............. |g:rcom_mapp|
        g:rcom_mapop ............ |g:rcom_mapop|
        n_K ..................... |rcom-map-n_K|


========================================================================
autoload/rcom.vim~

                                                    *g:rcom#help*
g:rcom#help                    (default: 1)
    Handling of help commands.
    
      0 ... disallow
      1 ... allow
      2 ... Use RSiteSearch() instead of help() (this option requires 
            Internet access)

                                                    *g:rcom#reuse*
g:rcom#reuse                   (default: 1)
    How to interact with R.
       0 ... Start a headless instance of R and transcribe the 
             interaction in VIM
       1 ... Re-use a running instance of R GUI (default)

                                                    *g:rcom#transcript_cmd*
g:rcom#transcript_cmd          (default: s:IsRemoteServer() ? 'edit' : 'vert split')
    Command used to display the transcript buffers.

                                                    *g:rcom#log_cmd*
g:rcom#log_cmd                 (default: 'split')
    Command used to display the transcript buffers.

                                                    *g:rcom#server*
g:rcom#server                  (default: "")
    If non-empty, use this ex command to start an instance of GVIM 
    that acts as a server for remotely evaluating R code. The string 
    will be evaluated via |:execute|.
    The string may contain %s where rcom-specific options should be 
    included.
    
    Example: >
      let g:rcom#server = 'silent ! start "" gvim.exe "+set lines=18" "+winpos 1 700" %s'
      let g:rcom#server = 'silent ! gvim %s &'
<

                                                    *g:rcom#server_wait*
g:rcom#server_wait             (default: 10)
    Seconds to wait after starting |rcom#server|.

                                                    *rcom#Initialize()*
rcom#Initialize(?reuse=g:rcom#reuse)
    Connect to the R interpreter for the current buffer.
    Usually not called by the user.

                                                    *rcom#EvaluateInBuffer()*
rcom#EvaluateInBuffer(rcode, ?mode='')
    Initialize the current buffer if necessary and evaluate some R code in 
    a running instance of R GUI.
    
    If there is a remote gvim server named RCOM running (see 
    |--servername|), evaluate R code remotely. This won't block the 
    current instance of gvim.
    
    See also |rcom#Evaluate()|.

                                                    *rcom#Evaluate()*
rcom#Evaluate(rcode, ?mode='')
    rcode can be a string or an array of strings.
    mode can be one of
      p ... Print the result
      r ... Always return a result
      . ... Behaviour depends on the context

                                                    *rcom#Quit()*
rcom#Quit(?bufnr=bufnr('%'))
    Disconnect from the R GUI.
    Usually not called by the user.

                                                    *rcom#Complete()*
rcom#Complete(findstart, base)
    Omnicompletion for R.
    See also 'omnifunc'.

                                                    *rcom#Keyword()*
rcom#Keyword(...)
    Display help on the word under the cursor.

                                                    *rcom#Info()*
rcom#Info(...)
    Display help on the word under the cursor.

                                                    *rcom#GetSelection()*
rcom#GetSelection(mode, ?mbeg="'<", ?mend="'>", ?opmode='selection')
    mode can be one of: selection, lines, block

                                                    *rcom#Operator()*
rcom#Operator(type, ...)
    For use as an operator. See 'opfunc'.

                                                    *rcom#LogBuffer()*
rcom#LogBuffer()

                                                    *:RComlog*
:RComlog
    Display the log.

                                                    *:RComlogreset*
:RComlogreset
    Reset the log.

                                                    *rcom#TranscriptBuffer()*
rcom#TranscriptBuffer()

                                                    *:RComtranscript*
:RComtranscript

                                                    *rcom#Transcribe()*
rcom#Transcribe(input, output)


========================================================================
ftplugin/r/rcom.vim~

                                                    *g:rcom_map*
g:rcom_map                     (default: "<c-cr>")
    The map for rcom-related maps in normal, insert, and visual mode.
    Set this to "", to prevent rcom from defining maps.

                                                    *g:rcom_mapp*
g:rcom_mapp                    (default: "<c-s-cr>")
    The map for rcom-related maps that print the result.
    Set this to "", to prevent rcom from defining maps.

                                                    *g:rcom_mapop*
g:rcom_mapop                   (default: "+")
    The rcom operator map.
    Set this to "", to prevent rcom from defining maps.
    
    This defines the following maps (where # represents the value of 
    g:rcom_mapop):
    
        #{motion} ... Operator
        #.        ... Evaluate the current line (normal mode)
        [visual]# ... Evaluate the visual area
        #p        ... Toggle printing for the above maps
        #l        ... Open the log window
        ##        ... Evaluate the |maparg| previously mapped to #

                                                    *rcom-map-n_K*
n_K ... :call rcom#Keyword()<cr>
    See |rcom#Keyword()| and |K|.



vim:tw=78:fo=tcq2:isk=!-~,^*,^|,^":ts=8:ft=help:norl:
